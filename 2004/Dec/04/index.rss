<?xml version="1.0"?>
<!-- RSS generated by pyblosxom-1.0.0 -->

<rss version="2.0">
  <channel>
    <title>Chris Lee</title>
    <link>http://c133.org/blog/</link>
    <description>all clee, all the time</description>
    <webMaster>clee@kde.org</webMaster>
    <managingEditor>clee@kde.org</managingEditor>
    <language>en</language>
  <item>
    <title>It&apos;s a good thing I exist!</title>
    <link>http://c133.org/blog/tech/its_a_good_thing_i_exist.html</link>
    <pubDate>Sat, 04 Dec 2004 05:44 -1000</pubDate>
    <description>&lt;p&gt;(Mixing some Zim quotes in now...)&lt;/p&gt;&lt;p&gt;Michael Pyne, brilliant guy that he is, was trying really hard to get this SNESAPU code working on his system. I couldn&apos;t even get the crap to compile, let alone to run and dump a bunch of zeroes like he was getting.&lt;/p&gt;&lt;p&gt;I had mpyne tar up his work and send it my way to see if I could find anything new. About forty-five minutes later, after we&apos;d both looked in a lot of unrelated areas, I found the missing link: A call to ResetAPU. Added that in, and all of a sudden, it works!&lt;/p&gt;&lt;p&gt;Now, that wasn&apos;t enough. Since I finally have this library compiling, and running, I don&apos;t want to simply dump the first five seconds of every SPC to a wave file named output.wav. I want to play them to my speakers!&lt;/p&gt;&lt;p&gt;Having no prior experience with libao, but remembering somewhat vaguely that the API didn&apos;t look too disgusting, I decided to try to get SPC-&gt;libao output working. And now, just under an hour later, &lt;a href=&quot;http://c133.org/tmp/spcplay.cpp&quot;&gt;I have it working&lt;/a&gt;. And I even cleaned up the code a little bit so it&apos;s not quite as embarrassing.&lt;/p&gt;&lt;p&gt;This code probably won&apos;t do most of you any good, but this is mostly for mpyne&apos;s benefit as I&apos;m not convinced I&apos;ll still be conscious when he gets back. However, if you are interested in playing with it, you can &lt;a href=&quot;http://c133.org/files/snesapu-linux.tar.bz2&quot;&gt;grab the tarball&lt;/a&gt; from my site. You&apos;ll need g++ and nasm to build the stuff, and since most of it&apos;s in assembly, you&apos;ll need to be on x86.&lt;br /&gt;&lt;/p&gt;</description>
  </item>
  </channel>
</rss>